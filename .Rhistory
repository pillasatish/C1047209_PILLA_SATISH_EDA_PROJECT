if(!all.equal(sort(unique(fold_ind)),1:nfolds))stop("Invalid fold partition.")
cv_errors=numeric(nfolds)
for(fold in 1:nfolds){
tmp_fit=lda(Xy[fold_ind!=fold,]$y~.,data = Xy[fold_ind!=fold,][,-10])
#phat_test_logistic = predict(tmp_fit, Xy[fold_ind==fold,], type = "response")
#yhat_test_logistic = ifelse(phat_test_logistic > 0.5, 1, 0)
yhat=predict(tmp_fit, Xy[fold_ind==fold,][,-10])
yhat_lda=yhat$class
yobs=y[fold_ind==fold]
#cv_errors[fold]=mean((yobs-yhat)^2)
cv_errors[fold] = 1 - mean((yobs == yhat_lda))
}
fold_sizes=numeric(nfolds)
for(fold in 1:nfolds)
fold_sizes[fold]=length(which(fold_ind==fold))
test_error=weighted.mean(cv_errors,w=fold_sizes)
return(test_error)
}
head(fold_index)
lda_test_error=lda_cv(X1,y,fold_index)
lda_test_error
qda_fit=qda(y~.,data = X1)
qda_fit
qda_cv=function(X1,y,fold_ind)
{
Xy=data.frame(X1,y=y)
nfolds=max(fold_ind)
if(!all.equal(sort(unique(fold_ind)),1:nfolds))stop("Invalid fold partition.")
cv_errors=numeric(nfolds)
for(fold in 1:nfolds){
tmp_fit=qda(Xy[fold_ind!=fold,]$y~.,data = Xy[fold_ind!=fold,][,-10])
#phat_test_logistic = predict(tmp_fit, Xy[fold_ind==fold,], type = "response")
#yhat_test_logistic = ifelse(phat_test_logistic > 0.5, 1, 0)
yhat=predict(tmp_fit, Xy[fold_ind==fold,][,-10])
yhat_lda=yhat$class
yobs=y[fold_ind==fold]
#cv_errors[fold]=mean((yobs-yhat)^2)
cv_errors[fold] = 1 - mean((yobs == yhat_lda))
}
fold_sizes=numeric(nfolds)
for(fold in 1:nfolds)
fold_sizes[fold]=length(which(fold_ind==fold))
test_error=weighted.mean(cv_errors,w=fold_sizes)
return(test_error)
}
head(fold_index)
qda_test_error=qda_cv(X1,y,fold_index)
qda_test_error
df_table=data.frame(methods=c("logistic regression on full dataset","best subset selection ","LASSO","LDA","QDA"),
Test_errors=c(test_error_lr,test_error_sb,test_error_lasso,lda_test_error,qda_test_error))
df_table
install.packages("contrib.url")
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
library(ggplot2)
ggplot(BreastCancer3,aes(x=Class,fill=Cell.size))+geom_bar()
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
install.packages("mlbench")
library(mlbench)
data("BreastCancer")
dim(BreastCancer)
head(BreastCancer)
summary(BreastCancer)
BreastCancer1=na.omit(BreastCancer)
dim(BreastCancer1)
BreastCancer2=lapply(BreastCancer1,as.numeric)
BreastCancer3=data.frame(BreastCancer2[2:11])
BreastCancer3$Class[BreastCancer3$Class=="1"]=0
BreastCancer3$Class[BreastCancer3$Class=="2"]=1
head(BreastCancer3)
summary(BreastCancer3)
cor(BreastCancer3)
table(BreastCancer3$Class)
percentage=table(BreastCancer3$Class)/length(BreastCancer3$Class)
df1=as.data.frame(percentage*100)
df1
pie(df1$Freq,labels = df1[,2],main = "frequency of cancer diagnosis")
pairs(BreastCancer3[1:9],col=BreastCancer3[,10]+1)
library(ggplot2)
ggplot(BreastCancer3,aes(x=Class,fill=Cell.size))+geom_bar()
tbl1=with(BreastCancer3, table(Class, Cell.size))
ggplot(as.data.frame(tbl1), aes(Cell.size, Freq, fill = Class)) +
geom_col(position = 'dodge')
tbl2 = with(BreastCancer3, table(Class, Bare.nuclei))
ggplot(as.data.frame(tbl2), aes(Bare.nuclei, Freq, fill = Class)) +
geom_col(position = 'dodge')
tbl3=with(BreastCancer3, table(Class, Cl.thickness))
ggplot(as.data.frame(tbl3), aes(Cl.thickness, Freq, fill = Class)) +
geom_col(position = 'dodge')
ggplot(BreastCancer3,aes(Cl.thickness,(Cell.size),color=BreastCancer1$Class))+
geom_point(position="jitter")
lr_fit=glm(BreastCancer3$Class~.,data = BreastCancer3,family ="binomial")
lr_fit_summary=summary(lr_fit)
lr_fit_summary
set.seed(1)
n=nrow(BreastCancer3)
nfolds=10
fold_index=sample(nfolds,n,replace = TRUE)
head(fold_index)
lr_cv=function(X1,y,fold_ind)
{
Xy=data.frame(X1,y=y)
nfolds=max(fold_ind)
if(!all.equal(sort(unique(fold_ind)),1:nfolds))stop("Invalid fold partition.")
cv_errors=numeric(nfolds)
for(fold in 1:nfolds){
tmp_fit=glm(y~.,data=Xy[fold_ind!=fold,],family ="binomial")
phat_test_logistic = predict(tmp_fit, Xy[fold_ind==fold,], type = "response")
yhat_test_logistic = ifelse(phat_test_logistic > 0.5, 1, 0)
yhat=predict(tmp_fit, Xy[fold_ind==fold,])
yobs=y[fold_ind==fold]
#cv_errors[fold]=mean((yobs-yhat)^2)
cv_errors[fold] = 1 - mean((yobs == yhat_test_logistic))
}
fold_sizes=numeric(nfolds)
for(fold in 1:nfolds)
fold_sizes[fold]=length(which(fold_ind==fold))
test_error=weighted.mean(cv_errors,w=fold_sizes)
return(test_error)
}
test_error_lr=lr_cv(BreastCancer3[,1:9],BreastCancer3$Class,fold_index)
test_error_lr
library(bestglm)
bss_fit_AIC=bestglm(BreastCancer3,family=binomial,IC="AIC")
bss_fit_BIC=bestglm(BreastCancer3,family=binomial,IC="BIC")
best_AIC=bss_fit_AIC$ModelReport$Bestk
best_AIC
best_BIC=bss_fit_BIC$ModelReport$Bestk
best_BIC
bss_fit_CV=bestglm(BreastCancer3,IC="CV",CVArgs=list(Method="HTF", K=10, REP=1))
best_CV=bss_fit_CV$ModelReport$Bestk
best_CV
bss_fit_AIC
bss_fit_BIC
bss_fit_CV
par(mfrow=c(1,3))
plot(2:11, bss_fit_AIC$Subsets$AIC, xlab="Number of predictors", ylab="AIC", type="b")
points(best_AIC, bss_fit_AIC$Subsets$AIC[best_AIC+1], col="red", pch=16)
plot(2:11, bss_fit_BIC$Subsets$BIC, xlab="Number of predictors", ylab="BIC", type="b")
points(best_BIC, bss_fit_BIC$Subsets$BIC[best_BIC+1], col="red", pch=16)
plot(2:11, bss_fit_CV$Subsets$CV, xlab="Number of predictors", ylab="CV", type="b")
points(best_CV, bss_fit_CV$Subsets$CV[best_CV+1], col="red", pch=16)
pstar=5
bss_fit_BIC$Subsets[pstar+1,]
X1=BreastCancer3[1:9]
#head(X1)
y=BreastCancer3$Class
(indices = as.logical(bss_fit_BIC$Subsets[pstar+1, 2:(9+1)]))
## [1] FALSE TRUE FALSE FALSE FALSE FALSE
BreastCancer4= data.frame(X1[,indices],y)
head(BreastCancer4)
X2=BreastCancer4[,1:5]
#head(X2)
y1=BreastCancer4[,6]
best_subset=function(X1,y,fold_ind)
{
Xy=data.frame(X1,y=y)
nfolds=max(fold_ind)
if(!all.equal(sort(unique(fold_ind)),1:nfolds))stop("Invalid fold partition.")
cv_errors=numeric(nfolds)
for(fold in 1:nfolds){
tmp_fit=glm(y~.,data=Xy[fold_ind!=fold,],family ="binomial")
phat_test_logistic = predict(tmp_fit, Xy[fold_ind==fold,], type = "response")
yhat_test_logistic = ifelse(phat_test_logistic > 0.5, 1, 0)
yhat=predict(tmp_fit, Xy[fold_ind==fold,])
yobs=y[fold_ind==fold]
#cv_errors[fold]=mean((yobs-yhat)^2)
cv_errors[fold] = 1 - mean((yobs == yhat_test_logistic))
}
fold_sizes=numeric(nfolds)
for(fold in 1:nfolds)
fold_sizes[fold]=length(which(fold_ind==fold))
test_error=weighted.mean(cv_errors,w=fold_sizes)
return(test_error)
}
test_error_sb=best_subset(X2,y1,fold_index)
test_error_sb
tinytex::install_tinytex()
install.packages("ProjectTemplate")
.libPaths()
myPaths <- .libPaths()
myPaths <- c(myPaths, ‘E:/Rpackages’)
myPaths <- .libPaths()
myPaths <- c(myPaths, "E:/Rpackages")
.libPaths(myPaths)
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
install.packages("ProjectTemplate")
library("ProjectTemplate")
#create.project("21047209_PILLA_SATISH_EDA_PROJECT")
load.project()
students_enorlled=length(unique(cyber.security.5_enrolments$learner_id))
students_enorlled
summary(cyber.security.5_enrolments)
enrolled_students=as.data.frame(table(cyber.security.5_enrolments$detected_country))
#removing the row without country code.
enrolled_students=enrolled_students[-c(1),]
#selecting the countries with more than 50 enrollments
countries_with_more_than_50_enrollment=enrolled_students[enrolled_students$Freq>50,]
countries_with_more_than_50_enrollment %>%
ggplot(aes(reorder(Var1,-Freq),Freq))+
geom_bar(stat="identity", fill="#f68060",alpha=.8,width = .6)+
labs(title="No of students enrolled vs countries",x="countires",
y="No. of students enrolled from different countries")+
theme(plot.title = element_text(hjust = 0.5))
#
students_unenrolled=length(cyber.security.5_leaving.survey.responses$left_at)
students_unenrolled
Percentage_unenrolled=(students_unenrolled/students_enorlled)*100
Percentage_unenrolled
merge_enrollment_leaving_survey=
merge.data.frame(cyber.security.5_leaving.survey.responses,cyber.security.5_enrolments,on="learner_id")
unenrolled_students=as.data.frame(table(merge_enrollment_leaving_survey$detected_country))
countries_with_more_than_5_unenrollment=unenrolled_students[unenrolled_students$Freq>5,]
countries_with_more_than_5_unenrollment %>%
ggplot(aes(reorder(Var1,-Freq),Freq))+
geom_bar(stat="identity", fill="#f68060",alpha=.8,width = .6)+
labs(title="No of students unenrolled vs countries",x="countires",
y="No. of students unenrolled from different countries")+
theme(plot.title = element_text(hjust = 0.5))
students_unerolled_plot=as.data.frame(table(cyber.security.5_leaving.survey.responses$leaving_reason))
ggplot(students_unerolled_plot,aes(reorder(Var1,Freq),Freq))+
geom_bar(stat="identity", fill="#f68060", alpha=.8, width=.5) +
coord_flip() +
labs(title="No of students unenrolled vs reasons",x="Reasons",y="No .of stusents unenrolled")+
theme(plot.title = element_text(hjust = 0.5))
g=ggplot(cyber.security.5_video.stats)
g+geom_line(aes(x=step_position,y=europe_views_percentage,colour='EUROPE_VIEWS_PERCENTAGE'))+
geom_line(aes(x=step_position,y=oceania_views_percentage,colour='OCEANIA_VIEWS_PERCENTAGE'))+
geom_line(aes(x=step_position,y=asia_views_percentage,colour='ASIA_VIEWS_PERCENTAGE'))+
geom_line(aes(x=step_position,y=north_america_views_percentage,colour='NORTH_AMERICA_VIEWS_PERCENTAGE'))+
geom_line(aes(x=step_position,y=south_america_views_percentage,colour='SOUTH_AMERICA_VIEWS_PERCENTAGE'))+
geom_line(aes(x=step_position,y=africa_views_percentage,colour='AFRICA_VIEWS_PERCENTAGE'))+
scale_color_discrete("Pattern")+xlab("step position")+ylab("viewed percentage")
length(unique(cyber.security.5_step.activity$learner_id))
#Converting step into chapters to find out students visiting each chapter
#(student visited chapters atleast one time)
#Adding new column to cyber.security.5_step.activity dataset
Convert_step_to_chapter=cyber.security.5_step.activity %>%
mutate(learner_id,chapter=trunc(step))
student_views=as.data.frame(table(Convert_step_to_chapter$chapter))
ggplot(student_views,aes(reorder(Var1,-Freq),Freq))+
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
labs(title="Chapters vs total views",x="chapter",y="total views")+
theme(plot.title = element_text(hjust = 0.5))
#the function return the number of students visiting each chapter.
student_visiting=function(x){ #x is dataframe(step.activity dataset modified to convert_step_to_chapter dataframe)
a=c()
for(i in 1:3){
y=x %>%
filter(x$chapter==i)
z=distinct(y,learner_id,.keep_all = TRUE)
b=nrow(z)
a=c(a,b)
}
return(a)
}
No_student_visited_chapter=student_visiting(Convert_step_to_chapter)
plot_student_vistied=data.frame(chapter=c("1","2","3"),
No_of_students_visited=No_student_visited_chapter)
ggplot(plot_student_vistied,aes(x=chapter,y=No_of_students_visited))+
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
labs(title="chapter vs students view",x="chapter",y="No.of students visited each chapter")+
theme(plot.title = element_text(hjust = 0.5))
plot_student_vistied %>%
mutate(chapter,percentage=(No_of_students_visited/2708)*100)
df30=as.data.frame(table(cyber.security.5_question.response$quiz_question))
ggplot(df30,aes(Var1,Freq))+geom_point(aes(color=-Freq, size=Freq),show.legend = F) +
coord_flip() + scale_fill_gradient(name="Total no of students attempted")+
labs(title="quiz question vs number of students attempting the quiz",x="quiz questions",
y="No. of students attempt")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(cyber.security.5_video.stats,aes(reorder(step_position,-total_views),total_views))+
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4)+
labs(title="step position vs total views",x="step position",y="total views")+
theme(plot.title = element_text(hjust = 0.5))
load.project()
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
install.packages("ProjectTemplate")
library("ProjectTemplate")
#create.project("21047209_PILLA_SATISH_EDA_PROJECT")
load.project()
students_enorlled=length(unique(cyber.security.5_enrolments$learner_id))
students_enorlled
enrolled_students=as.data.frame(table(cyber.security.5_enrolments$detected_country))
#removing the row without country code.
enrolled_students=enrolled_students[-c(1),]
#selecting the countries with more than 50 enrollments
countries_with_more_than_50_enrollment=enrolled_students[enrolled_students$Freq>50,]
countries_with_more_than_50_enrollment %>%
ggplot(aes(reorder(Var1,-Freq),Freq))+
geom_bar(stat="identity", fill="#f68060",alpha=.8,width = .6)+
labs(title="No of students enrolled vs Countries",x="Countires",
y="No. of students enrolled from different countries")+
theme(plot.title = element_text(hjust = 0.5))
#
students_unenrolled=length(cyber.security.5_leaving.survey.responses$left_at)
students_unenrolled
Percentage_unenrolled=(students_unenrolled/students_enorlled)*100
Percentage_unenrolled
merge_enrollment_leaving_survey=
merge.data.frame(cyber.security.5_leaving.survey.responses,cyber.security.5_enrolments,on="learner_id")
unenrolled_students=as.data.frame(table(merge_enrollment_leaving_survey$detected_country))
countries_with_more_than_5_unenrollment=unenrolled_students[unenrolled_students$Freq>5,]
countries_with_more_than_5_unenrollment %>%
ggplot(aes(reorder(Var1,-Freq),Freq))+
geom_bar(stat="identity", fill="#f68060",alpha=.8,width = .6)+
labs(title="No of students unenrolled vs Countries",x="Countires",
y="No. of students unenrolled from different countries")+
theme(plot.title = element_text(hjust = 0.5))
students_unerolled_plot=as.data.frame(table(cyber.security.5_leaving.survey.responses$leaving_reason))
ggplot(students_unerolled_plot,aes(reorder(Var1,Freq),Freq))+
geom_bar(stat="identity", fill="#f68060", alpha=.8, width=.5) +
coord_flip() +
labs(title="No of students unenrolled vs reasons",x="Reasons",y="No .of students unenrolled")+
theme(plot.title = element_text(hjust = 0.5))
g=ggplot(cyber.security.5_video.stats)
g+geom_line(aes(x=step_position,y=europe_views_percentage,colour='Europe view percentage'))+
geom_line(aes(x=step_position,y=oceania_views_percentage,colour='Oceania view percentage'))+
geom_line(aes(x=step_position,y=asia_views_percentage,colour='Asia view percentage'))+
geom_line(aes(x=step_position,y=north_america_views_percentage,colour='North America view percentage'))+
geom_line(aes(x=step_position,y=south_america_views_percentage,colour='South America view percentage '))+
geom_line(aes(x=step_position,y=africa_views_percentage,colour='Africa view percentage'))+
scale_color_discrete("Pattern")+xlab("step position")+ylab("viewed percentage")
enrollment.list=list(cyber.security.1_enrolments,cyber.security.2_enrolments,cyber.security.3_enrolments,cyber.security.4_enrolments,cyber.security.5_enrolments,cyber.security.6_enrolments,cyber.security.7_enrolments)
students_enrollements_over_7_runs=lapply(enrollment.list, function(x) length(unique(x$learner_id)))
students=data.frame(students_enrollements_over_7_runs)
colnames(students)=c("1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
students
students <- melt(students)
matplot(t(students), type = "l")
ggplot(t(students))
students_enrollements_over_7_runs
std=function(x){
y=c()
z=length(unique(x$learner_id))
y=c(y,z)
return(y)
}
std(enrollment.list)
std=function(x){
y=c()
z=length(unique(x$learner_id))
y=c(y,z)
return(y)
}
std(cyber.security.1_enrolments)
students=data.frame(students_enrollements_over_7_runs)
students
students_enrollements_over_7_runs
students1array(as.numeric(unlist(students_enrollements_over_7_runs)), dim=c(7, 1, 1))
students1=array(as.numeric(unlist(students_enrollements_over_7_runs)), dim=c(7, 1, 1))
students1
students=data.frame(students1)
students
colnames(students)=c("1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
students
ggplot(students)
students
rownames(students)=c("1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
students
ggplot(students)
View(students)
rownames(students)=c(runs=("1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time"))
rownames(students)=c("1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
students
students1
ggplot(students1)
students=data.frame(students1)
students
ggplot(students)
View(students)
colnames(students)=c("runs","students")
colnames(students)=c("runs")
students
rownames(students)=c("1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
colnames(students)=c("runs")
colnames(students)=c("runs","a")
students
students
students=data.frame(students1)
students
row_names=data.frame("1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
row_names=data.frame(runs="1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
row_names
row_names=t(row_names)
row_names
merge(row_names,students)
list_of_students=merge(row_names,students)
ggplot(students)
plot(students)
students_enrollements_over_7_runs
list_of_students=merge(row_names,students)
list_of_students
students_enrollements_over_7_runs
row_names=data.frame(runs="1st time","2nd time ","3rd time","4th time","5th time","6th time","7th time")
list_of_students=merge(row_names,students_enrollements_over_7_runs)
list_of_students
list_of_students=rbind(row_names,students_enrollements_over_7_runs)
list_of_students
plot(list_of_students)
list_of_students
list_of_students=t(list_of_students)
list_of_students
list_of_students=rbind(row_names,students_enrollements_over_7_runs)
list_of_students
list_of_students=t(list_of_students)
list_of_students
list_of_students=rbind(students_enrollements_over_7_runs,row_names)
list_of_students
list_of_students=t(list_of_students)
list_of_students
plot(list_of_students)
list_of_students=t(as.numeric(list_of_students))
list_of_students
list_of_students
plot(list_of_students)
list_of_students=rbind(students_enrollements_over_7_runs,row_names)
list_of_students
students_enrollements_over_7_runs
students1=array(as.numeric(unlist(students_enrollements_over_7_runs)), dim=c(7, 1, 1))
students1
students=data.frame(students1)
students
c=tibble::rownames_to_column(students,"runs")
c
plot(c)
students1
students=data.frame(students1)
students
c=tibble::rownames_to_column(students,"runs")
c
plot(c)
View(c)
ggplot(c,aes(reorder(runs,students1),students1))+
geom_bar(stat="identity", fill="#f68060", alpha=.8, width=.5) +
coord_flip() +
labs(title="No of students unenrolled vs reasons",x="Reasons",y="No .of students unenrolled")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(c,aes(reorder(runs,students1),students1))+
geom_bar(stat="identity", fill="#f68060", alpha=.8, width=.5) +
labs(title="No of students unenrolled vs reasons",x="Reasons",y="No .of students unenrolled")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(c,aes(runs,students1),students1)+
geom_bar(stat="identity", fill="#f68060", alpha=.8, width=.5) +
labs(title="No of students unenrolled vs reasons",x="Reasons",y="No .of students unenrolled")+
theme(plot.title = element_text(hjust = 0.5))
View(c)
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
install.packages("ProjectTemplate")
library("ProjectTemplate")
#create.project("B21047209_PILLA_SATISH_EDA_PROJECT")
load.project()
install.packages("latexpdf")
library(latexpdf)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
load.project()
setwd("C:/Users/pilla/Desktop/C1047209_PILLA_SATISH_EDA_PROJECT")
library(readr)
library(dplyr)
library(dbplyr)
cyber_security_1_enrolments <- read_csv("data/cyber-security-1_enrolments.csv")
cyber_security_2_enrolments <- read_csv("data/cyber-security-2_enrolments.csv")
cyber_security_3_enrolments <- read_csv("data/cyber-security-3_enrolments.csv")
cyber_security_4_enrolments <- read_csv("data/cyber-security-4_enrolments.csv")
cyber_security_5_enrolments <- read_csv("data/cyber-security-5_enrolments.csv")
cyber_security_6_enrolments <- read_csv("data/cyber-security-6_enrolments.csv")
cyber_security_7_enrolments <- read_csv("data/cyber-security-7_enrolments.csv")
enrolments = rbind(cyber_security_1_enrolments, cyber_security_2_enrolments, cyber_security_3_enrolments, cyber_security_4_enrolments, cyber_security_5_enrolments, cyber_security_6_enrolments, cyber_security_7_enrolments)
eda_report(enrolments)
eda_report(enrolments)
eda_report(enrolments)
detach("package:dplyr", unload = TRUE)
library(dplyr)
eda_report(enrolments)
eda_web_report(enrolments)
install.packages("SmartEDA")
library(SmartEDA)
# Overview of the data - Type = 1
ExpData(data=enrolments,type=1)
# Structure of the data - Type = 2
ExpData(data=enrolments,type=2)
########################################################################################################
# Numerical summary of each dataset:
# Overview of the data - Type = 1
Numnerical_summary_enrollemts_1=ExpData(data=enrolments,type=1)
# Structure of the data - Type = 2
Numerical_summary_enrollents_2ExpData(data=enrolments,type=2)
# Structure of the data - Type = 2
Numerical_summary_enrollents_2=ExpData(data=enrolments,type=2)
install.packages("DT")
datatable(Numnerical_summary_enrollemts_1)
library(DT)
datatable(Numnerical_summary_enrollemts_1)
overview_enrollement=datatable(Numnerical_summary_enrollemts_1)
#overview_enrollement=datatable(Numnerical_summary_enrollemts_1)
# Overview of the data - Type = 1
Numnerical_summary_enrollemts_1=ExpData(data=enrolments,type=1)
install.packages("reactable")
library(reactable)
install.packages("huxtable")
library(huxtable)
